/*
 * ndibAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from "../ApiClient";
import { NewsModel } from "../model/NewsModel";

/**
 * News service.
 * @module api/NewsApi
 * @version 1.0
 */
export class NewsApi {
  /**
    * Constructs a new NewsApi. 
    * @alias module:api/NewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the newsAddDataPost operation.
   * @callback moduleapi/NewsApi~newsAddDataPostCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {String} data
   * @param {module:api/NewsApi~newsAddDataPostCallback} callback The callback function, accepting three arguments: error, data, response
   */
  newsAddDataPost(data, callback) {
    let postBody = null;
    // verify the required parameter 'data' is set
    if (data === undefined || data === null) {
      throw new Error(
        "Missing the required parameter 'data' when calling newsAddDataPost"
      );
    }

    let pathParams = {
      data: data,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;

    return this.apiClient.callApi(
      "/News/Add/{data}",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
  /**
   * Callback function to receive the result of the newsGetGet operation.
   * @callback moduleapi/NewsApi~newsGetGetCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/NewsModel>{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {module:api/NewsApi~newsGetGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  newsGetGet(callback) {
    let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [NewsModel];

      return this.apiClient.callApi(
        '/News/Get', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the newsGetIdGet operation.
     * @callback moduleapi/NewsApi~newsGetIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewsModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

  /**
   * @param {Number} id
   * @param {module:api/NewsApi~newsGetIdGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  newsGetIdGet(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling newsGetIdGet"
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["text/plain", "application/json", "text/json"];
    let returnType = NewsModel;

    return this.apiClient.callApi(
      "/News/Get/{id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      callback
    );
  }
}
