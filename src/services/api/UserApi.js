/*
 * ndibAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import { ApiClient } from "../ApiClient";
import { ChannelModel } from '../model/ChannelModel';
import { ProductModel } from '../model/ProductModel';
import { PurchaseModel } from '../model/PurchaseModel';
import { UserModel } from '../model/UserModel';

/**
* User service.
* @module api/UserApi
* @version 1.0
*/
export class UserApi {

  /**
  * Constructs a new UserApi. 
  * @alias module:api/UserApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instanc
  e} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the userGetPublicGet operation.
   * @callback moduleapi/UserApi~userGetPublicGetCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/UserModel>{ data The data returned by the service call.
  * @param {String} response The complete HTTP response.
  */

  /**
   * @param {module:api/UserApi~userGetPublicGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  userGetPublicGet(callback) {

    let postBody = null;

    let pathParams = {

    };
    let queryParams = {

    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = ['basic'];
    let contentTypes = [];
    let accepts = ['text/plain', 'application/json', 'text/json'];
    let returnType = [UserModel];

    return this.apiClient.callApi(
      '/User/Get/public', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }
  /**
   * Callback function to receive the result of the userGet operation.
   * @callback moduleapi/UserApi~userGetCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/UserModel>{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {module:api/UserApi~userGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  userGet(callback) {

    let postBody = null;

    let pathParams = {

    };
    let queryParams = {

    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = ['basic'];
    let contentTypes = [];
    let accepts = ['text/plain', 'application/json', 'text/json'];
    let returnType = [UserModel];

    return this.apiClient.callApi(
      '/User', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }
  /**
   * Callback function to receive the result of the userGetAliasGet operation.
   * @callback moduleapi/UserApi~userGetAliasGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/UserModel{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {String} alias 
   * @param {module:api/UserApi~userGetAliasGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  userGetAliasGet(alias, callback) {

    let postBody = null;
    // verify the required parameter 'alias' is set
    if (alias === undefined || alias === null) {
      throw new Error("Missing the required parameter 'alias' when calling userGetAliasGet");
    }

    let pathParams = {
      'alias': alias
    };
    let queryParams = {

    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = ['basic'];
    let contentTypes = [];
    let accepts = ['text/plain', 'application/json', 'text/json'];
    let returnType = UserModel;

    return this.apiClient.callApi(
      '/User/Get/{alias}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }
  /**
   * Callback function to receive the result of the userGetIdGet operation.
   * @callback moduleapi/UserApi~userGetIdGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/UserModel{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Number} id 
   * @param {module:api/UserApi~userGetIdGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  userGetIdGet(id, callback) {

    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling userGetIdGet");
    }

    let pathParams = {
      'id': id
    };
    let queryParams = {

    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = ['basic'];
    let contentTypes = [];
    let accepts = ['text/plain', 'application/json', 'text/json'];
    let returnType = UserModel;

    return this.apiClient.callApi(
      '/User/Get/{id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }
  /**
   * Callback function to receive the result of the userGetNameChannelsGet operation.
   * @callback moduleapi/UserApi~userGetNameChannelsGetCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/ChannelModel>{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {String} name 
   * @param {module:api/UserApi~userGetNameChannelsGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  userGetNameChannelsGet(name, callback) {

    let postBody = null;
    // verify the required parameter 'name' is set
    if (name === undefined || name === null) {
      throw new Error("Missing the required parameter 'name' when calling userGetNameChannelsGet");
    }

    let pathParams = {
      'name': name
    };
    let queryParams = {

    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = ['basic'];
    let contentTypes = [];
    let accepts = ['text/plain', 'application/json', 'text/json'];
    let returnType = [ChannelModel];

    return this.apiClient.callApi(
      '/User/Get/{name}/Channels', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }
  /**
   * Callback function to receive the result of the userGetNameFriendsGet operation.
   * @callback moduleapi/UserApi~userGetNameFriendsGetCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/UserModel>{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {String} name 
   * @param {module:api/UserApi~userGetNameFriendsGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  userGetNameFriendsGet(name, callback) {

    let postBody = null;
    // verify the required parameter 'name' is set
    if (name === undefined || name === null) {
      throw new Error("Missing the required parameter 'name' when calling userGetNameFriendsGet");
    }

    let pathParams = {
      'name': name
    };
    let queryParams = {

    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = ['basic'];
    let contentTypes = [];
    let accepts = ['text/plain', 'application/json', 'text/json'];
    let returnType = [UserModel];

    return this.apiClient.callApi(
      '/User/Get/{name}/Friends', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }
  /**
   * Callback function to receive the result of the userGetNameProductsGet operation.
   * @callback moduleapi/UserApi~userGetNameProductsGetCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/ProductModel>{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {String} name 
   * @param {module:api/UserApi~userGetNameProductsGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  userGetNameProductsGet(name, callback) {

    let postBody = null;
    // verify the required parameter 'name' is set
    if (name === undefined || name === null) {
      throw new Error("Missing the required parameter 'name' when calling userGetNameProductsGet");
    }

    let pathParams = {
      'name': name
    };
    let queryParams = {

    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = ['basic'];
    let contentTypes = [];
    let accepts = ['text/plain', 'application/json', 'text/json'];
    let returnType = [ProductModel];

    return this.apiClient.callApi(
      '/User/Get/{name}/Products', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }
  /**
   * Callback function to receive the result of the userGetNamePurchasesGet operation.
   * @callback moduleapi/UserApi~userGetNamePurchasesGetCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/PurchaseModel>{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {String} name 
   * @param {module:api/UserApi~userGetNamePurchasesGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  userGetNamePurchasesGet(name, callback) {

    let postBody = null;
    // verify the required parameter 'name' is set
    if (name === undefined || name === null) {
      throw new Error("Missing the required parameter 'name' when calling userGetNamePurchasesGet");
    }

    let pathParams = {
      'name': name
    };
    let queryParams = {

    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = ['basic'];
    let contentTypes = [];
    let accepts = ['text/plain', 'application/json', 'text/json'];
    let returnType = [PurchaseModel];

    return this.apiClient.callApi(
      '/User/Get/{name}/Purchases', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }
  /**
   * Callback function to receive the result of the userIdDelete operation.
   * @callback moduleapi/UserApi~userIdDeleteCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Number} id 
   * @param {module:api/UserApi~userIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
   */
  userIdDelete(id, callback) {

    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling userIdDelete");
    }

    let pathParams = {
      'id': id
    };
    let queryParams = {

    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = ['basic'];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;

    return this.apiClient.callApi(
      '/User/{id}', 'DELETE',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }
  /**
   * Callback function to receive the result of the userIdGet operation.
   * @callback moduleapi/UserApi~userIdGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/UserModel{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Number} id 
   * @param {module:api/UserApi~userIdGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  userIdGet(id, callback) {

    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error("Missing the required parameter 'id' when calling userIdGet");
    }

    let pathParams = {
      'id': id
    };
    let queryParams = {

    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = ['basic'];
    let contentTypes = [];
    let accepts = ['text/plain', 'application/json', 'text/json'];
    let returnType = UserModel;

    return this.apiClient.callApi(
      '/User/{id}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }
  /**
   * Callback function to receive the result of the userIsOnlineLoginGet operation.
   * @callback moduleapi/UserApi~userIsOnlineLoginGetCallback
   * @param {String} error Error message, if any.
   * @param {'Boolean'{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {String} login 
   * @param {module:api/UserApi~userIsOnlineLoginGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  userIsOnlineLoginGet(login, callback) {

    let postBody = null;
    // verify the required parameter 'login' is set
    if (login === undefined || login === null) {
      throw new Error("Missing the required parameter 'login' when calling userIsOnlineLoginGet");
    }

    let pathParams = {
      'login': login
    };
    let queryParams = {

    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = ['basic'];
    let contentTypes = [];
    let accepts = ['text/plain', 'application/json', 'text/json'];
    let returnType = 'Boolean';

    return this.apiClient.callApi(
      '/User/IsOnline/{login}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }
  /**
   * Callback function to receive the result of the userIsPlayingUserIdGet operation.
   * @callback moduleapi/UserApi~userIsPlayingUserIdGetCallback
   * @param {String} error Error message, if any.
   * @param {'String'{ data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Number} userId 
   * @param {module:api/UserApi~userIsPlayingUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
   */
  userIsPlayingUserIdGet(userId, callback) {

    let postBody = null;
    // verify the required parameter 'userId' is set
    if (userId === undefined || userId === null) {
      throw new Error("Missing the required parameter 'userId' when calling userIsPlayingUserIdGet");
    }

    let pathParams = {
      'userId': userId
    };
    let queryParams = {

    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = ['basic'];
    let contentTypes = [];
    let accepts = ['text/plain', 'application/json', 'text/json'];
    let returnType = 'String';

    return this.apiClient.callApi(
      '/User/IsPlaying/{userId}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }
  /**
   * Callback function to receive the result of the userPost operation.
   * @callback moduleapi/UserApi~userPostCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Object} opts Optional parameters
   * @param {module:model/UserModel} opts.body 
   * @param {module:api/UserApi~userPostCallback} callback The callback function, accepting three arguments: error, data, response
   */
  userPost(opts, callback) {
    opts = opts || {};
    let postBody = opts['body'];

    let pathParams = {

    };
    let queryParams = {

    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = ['basic'];
    let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
    let accepts = [];
    let returnType = null;

    return this.apiClient.callApi(
      '/User', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }
  /**
   * Callback function to receive the result of the userPut operation.
   * @callback moduleapi/UserApi~userPutCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Object} opts Optional parameters
   * @param {module:model/UserModel} opts.body 
   * @param {module:api/UserApi~userPutCallback} callback The callback function, accepting three arguments: error, data, response
   */
  userPut(opts, callback) {
    opts = opts || {};
    let postBody = opts['body'];

    let pathParams = {

    };
    let queryParams = {

    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = ['basic'];
    let contentTypes = ['application/json', 'text/json', 'application/_*+json'];
    let accepts = [];
    let returnType = null;

    return this.apiClient.callApi(
      '/User', 'PUT',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }
  /**
   * Callback function to receive the result of the userReportOnlineLoginGet operation.
   * @callback moduleapi/UserApi~userReportOnlineLoginGetCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {String} login 
   * @param {module:api/UserApi~userReportOnlineLoginGetCallback} callback The callback function, accepting three arguments: error, data, response
   */
  userReportOnlineLoginGet(login, callback) {

    let postBody = null;
    // verify the required parameter 'login' is set
    if (login === undefined || login === null) {
      throw new Error("Missing the required parameter 'login' when calling userReportOnlineLoginGet");
    }

    let pathParams = {
      'login': login
    };
    let queryParams = {

    };
    let headerParams = {

    };
    let formParams = {

    };

    let authNames = ['basic'];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;

    return this.apiClient.callApi(
      '/User/ReportOnline/{login}', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, callback
    );
  }

}