/*
 * ndibAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";

/**
* Files service.
* @module api/FilesApi
* @version 1.0
*/
export class FilesApi {

    /**
    * Constructs a new FilesApi. 
    * @alias module:api/FilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the filesDownloadAppNameGet operation.
     * @callback moduleapi/FilesApi~filesDownloadAppNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appName 
     * @param {module:api/FilesApi~filesDownloadAppNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filesDownloadAppNameGet(appName, callback) {
      
      let postBody = null;
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling filesDownloadAppNameGet");
      }

      let pathParams = {
        'appName': appName
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/Files/Download/{appName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesDownloadAppNameMasterClientVersionGet operation.
     * @callback moduleapi/FilesApi~filesDownloadAppNameMasterClientVersionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appName 
     * @param {Number} clientVersion 
     * @param {module:api/FilesApi~filesDownloadAppNameMasterClientVersionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filesDownloadAppNameMasterClientVersionGet(appName, clientVersion, callback) {
      
      let postBody = null;
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling filesDownloadAppNameMasterClientVersionGet");
      }
      // verify the required parameter 'clientVersion' is set
      if (clientVersion === undefined || clientVersion === null) {
        throw new Error("Missing the required parameter 'clientVersion' when calling filesDownloadAppNameMasterClientVersionGet");
      }

      let pathParams = {
        'appName': appName,'clientVersion': clientVersion
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/Files/Download/{appName}/master/{clientVersion}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesDownloadAppNameTargetVersionClientVersionGet operation.
     * @callback moduleapi/FilesApi~filesDownloadAppNameTargetVersionClientVersionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appName 
     * @param {Number} targetVersion 
     * @param {Number} clientVersion 
     * @param {module:api/FilesApi~filesDownloadAppNameTargetVersionClientVersionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filesDownloadAppNameTargetVersionClientVersionGet(appName, targetVersion, clientVersion, callback) {
      
      let postBody = null;
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling filesDownloadAppNameTargetVersionClientVersionGet");
      }
      // verify the required parameter 'targetVersion' is set
      if (targetVersion === undefined || targetVersion === null) {
        throw new Error("Missing the required parameter 'targetVersion' when calling filesDownloadAppNameTargetVersionClientVersionGet");
      }
      // verify the required parameter 'clientVersion' is set
      if (clientVersion === undefined || clientVersion === null) {
        throw new Error("Missing the required parameter 'clientVersion' when calling filesDownloadAppNameTargetVersionClientVersionGet");
      }

      let pathParams = {
        'appName': appName,'targetVersion': targetVersion,'clientVersion': clientVersion
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/Files/Download/{appName}/{targetVersion}/{clientVersion}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesDownloadAppNameVersionGet operation.
     * @callback moduleapi/FilesApi~filesDownloadAppNameVersionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} appName 
     * @param {Number} version 
     * @param {module:api/FilesApi~filesDownloadAppNameVersionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filesDownloadAppNameVersionGet(appName, version, callback) {
      
      let postBody = null;
      // verify the required parameter 'appName' is set
      if (appName === undefined || appName === null) {
        throw new Error("Missing the required parameter 'appName' when calling filesDownloadAppNameVersionGet");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling filesDownloadAppNameVersionGet");
      }

      let pathParams = {
        'appName': appName,'version': version
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/Files/Download/{appName}/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the filesUploadPut operation.
     * @callback moduleapi/FilesApi~filesUploadPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<Blob>} opts.files 
     * @param {module:api/FilesApi~filesUploadPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filesUploadPut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'files': this.apiClient.buildCollectionParam(opts['files'], 'multi')
      };

      let authNames = ['basic'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/Files/Upload', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}